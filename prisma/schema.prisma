generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String?
  firstName        String?
  lastName         String?
  email            String?   @unique
  emailVerified    DateTime?
  emailVerifyToken String?
  image            String?
  password         String?
  role             Role   @default(user)
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  orders           Order[]

  @@map("users")
}

enum Role {
  user
  admin
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]
  orderItems  OrderItem[]
  inStock     Boolean     @default(true)
  leadTime    String
  shippingDetails String
  details     ProductDetail[]
  @@map("products")
}

model ProductDetail {
  id        String    @id @default(uuid())
  name      String
  items     String[]
  productId String
  product   Product   @relation(fields: [productId], references: [id])

  @@map("product_details")
}

model Image {
  id        String    @id @default(uuid())
  url       String
  name      String
  alt       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  productId String
  product   Product   @relation(fields: [productId], references: [id])

  @@map("images")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Order {
  id         String      @id @default(uuid())
  orderNumber String     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  total      Float
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  status      OrderStatus @default(CREATED)

  @@map("orders")
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model DiscountCoupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String
  discount    Float
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("discount_coupons")
}
