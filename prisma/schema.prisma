generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(uuid())
  stripeCustomerId          String?
  cloudinaryPublicId        String?
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  emailVerifyToken          String?
  passwordVerificationToken String?
  phone                     String?
  image                     String?
  password                  String?
  role                      Role      @default(user)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  orders                    Order[]
  wishlist                  Product[]

  @@map("users")
}

model Guest {
  id               String   @id @default(uuid())
  stripeCustomerId String?
  name             String?
  email            String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]

  @@map("guests")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  images        Image[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categories    Category[]
  orderItems    OrderItem[]
  units         Float          @default(0)
  inStock       Boolean        @default(true)
  leadTime      String
  productDetail ProductDetail?
  wishlist      User[]

  @@map("products")
}

model ProductDetail {
  id                 String              @id @default(uuid())
  productDetailItems ProductDetailItem[]
  productId          String              @unique
  product            Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("product_details")
}

model ProductDetailItem {
  id                    String        @id @default(uuid())
  productDetailItemName String
  items                 String[]
  productDetail         ProductDetail @relation(fields: [productDetailId], references: [id], onDelete: Cascade)
  productDetailId       String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("product_detail_items")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  name      String
  alt       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("images")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Order {
  id                String        @id @default(uuid())
  orderNumber       String        @unique
  stripeInvoiceId   String?       @unique
  contactEmail      String?
  total             Float
  userId            String?
  user              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestId           String?
  guest             Guest?        @relation(fields: [guestId], references: [id], onDelete: Cascade)
  invoiceUrl        String?       @unique
  orderItems        OrderItem[]
  orderStatus       OrderStatus   @default(CREATED)
  shippingAddress   Address?      @relation("shippingAddress", fields: [shippingAddressId], references: [id], onDelete: Cascade)
  shippingAddressId String?
  billingAddress    Address?      @relation("billingAddress", fields: [billingAddressId], references: [id], onDelete: Cascade)
  billingAddressId  String?
  contactPhone      String?
  paymentStatus     PaymentStatus @default(UNPAID)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("orders")
}

model Address {
  id                    String   @id @default(uuid())
  addressLine1          String
  addressLine2          String?
  company               String?
  city                  String
  stateOrProvince       String
  country               String
  postalCode            String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  ordersShippingAddress Order[]  @relation("shippingAddress")
  ordersBillingAddress  Order[]  @relation("billingAddress")

  @@map("addresses")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum Role {
  user
  admin
}

enum PaymentStatus {
  UNPAID
  PAID
}
